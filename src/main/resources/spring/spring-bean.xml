<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:myalias="http://www.relyy.org/schema/alias"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/tool http://www.springframework.org/schema/tool/spring-tool-4.3.xsd
        http://www.relyy.org/schema/alias http://www.relyy.org/schema/alias.xsd" >

        <!--构造器注入,循环依赖无法解决-->
        <bean id="student" class="com.able.re.springResource.bean.factorybean.Student">
<!--            属性指定确定的值-->
            <constructor-arg index="0" value="张1"/>
            <constructor-arg index="1" value="3"/>
            <constructor-arg index="2" value="三年二班"/>
<!--            引用的是配置的bean,需要使用如下方式-->
<!--            <constructor-arg name="age" ref="xxxx" />-->
        </bean>

    <bean id="student2" class="com.able.re.springResource.bean.factorybean.Student">
<!--        set属性注入，推荐，可以解决单例的循环依赖问题-->
        <property name="age" value="3"/>
    </bean>


<!--        <myalias:alias id="customAlias" c_name="student" c_alias="meluo" />-->
<!--工厂方法注入 构造器-->
    <bean id="studentFactory" class="com.able.re.springResource.bean.factorybean.StudentFactory"/>
    <bean id="student3" factory-bean="studentFactory" factory-method="newInstance">
        <constructor-arg index="0" value="张3"/>
        <constructor-arg index="1" value="3"/>
        <constructor-arg index="2" value="三年二班"/>
    </bean>
<!-- 静态工厂方法注入 构造器   -->
    <bean id="student4" class="com.able.re.springResource.bean.factorybean.StudentStaticFactory" factory-method="newInstance">
        <constructor-arg index="0" value="张4"/>
        <constructor-arg index="1" value="3"/>
        <constructor-arg index="2" value="三年二班"/>
    </bean>

<!--    <bean id="student5" class="com.able.re.springResource.bean.factorybean.StudentFactoryBean" p:studentInfo="张5,3,三年二班"/>-->
<!--    FactoryBean 用setter注入-->
    <bean id="student5" class="com.able.re.springResource.bean.factorybean.StudentFactoryBean" >
        <property name="studentInfo" value="张5,3,三年二班"/>
    </bean>

<!--    父子bean-->
    <bean id="father" class="com.able.re.springResource.bean.rootandchild.Father" lazy-init="true" abstract="true" >
        <property name="name" value="fatherBean"/>
    </bean>
    <bean id="sun" class="com.able.re.springResource.bean.rootandchild.Sun" parent="father" >
        <property name="name" value="sunbean"/>
<!--        <property name="job" value="student"/>-->
        <property name="hobbit" value="busketball"/>
    </bean>

<!--    内部bean只能通过外部bean的实例化进行属性注入时实例化-->
    <bean id="outter" class="com.able.re.springResource.bean.rootandchild.Outter">
        <property name="name" value="outterBean"/>
        <property name="age" value="2"/>
        <property name="inner">
            <bean class="com.able.re.springResource.bean.rootandchild.InnerBean">
                <property name="address" value="我在outter内部"/>
            </bean>
        </property>
    </bean>

    <bean id="collectionInject" class="com.able.re.springResource.bean.collectionInject.CollectionsInjectionDemo">
        <property name="listName">
            <list value-type="java.lang.String" merge="false">
                <value>张三</value>
                <value>李四</value>
                <value>张三</value>
            </list>
        </property>
        <property name="setName">
            <set value-type="java.lang.String" merge="true">
                <value>张三</value>
                <value>李四</value>
                <value>张三</value>
            </set>
        </property>
        <property name="mapName">
            <map key-type="java.lang.String" value-type="java.lang.String">
                <entry key="name" value="Lucas"/>
                <entry key="age" value="3"/>
            </map>
        </property>
        <property name="arrayNames">
            <array value-type="java.lang.String">
                <value>张三</value>
                <value>李四</value>
                <value>王五</value>
            </array>
        </property>
        <property name="propertiesName">
            <props value-type="java.lang.String">
                <prop key="name">小明</prop>
                <prop key="agv">34</prop>
            </props>
        </property>
    </bean>

    <bean id="car" class="com.able.re.springResource.bean.LookAndReplace.Car">
        <lookup-method name="createTaxi" bean="taxi"/>
    </bean>

    <bean id="taxi" class="com.able.re.springResource.bean.LookAndReplace.Taxi" scope="prototype"/>

<!--    <bean id="dogReplace" class="com.able.re.springResource.bean.LookAndReplace.ReplaceDog"/>-->
    <bean id="originalBean" class="com.able.re.springResource.bean.LookAndReplace.OriginalDog">
<!--        <replaced-method name="sayHello" replacer="dogReplace">-->
<!--            <arg-type match="java.lang.String"/>-->
<!--        </replaced-method>-->
    </bean>
    <!-- =====beanPostProcessor配置begin =====-->
<!--    <bean id="myBeanPostProcessorOne" class="com.able.re.springResource.bean.beanpostprocessor.MyBeanPostProcessorOne"/>-->
<!--    <bean id="myBeanPostProcessorTwo" class="com.able.re.springResource.bean.beanpostprocessor.MyBeanPostProcessorTwo"/>-->
    <!-- =====beanPostProcessor配置end =====-->

    <!-- =====beanFactoryPostProcessor配置begin =====-->
<!--    &lt;!&ndash;注册第一个后置工厂处理器&ndash;&gt;-->
<!--    <bean id="myBeanFactoryPostProcessorOne" class="com.able.re.springResource.bean.beanpostprocessor.MyBeanFactoryPostProcessorOne"/>-->
<!--    &lt;!&ndash;注册第二个后置工厂处理器&ndash;&gt;-->
<!--    <bean id="myBeanFactoryPostProcessorTwo" class="com.able.re.springResource.bean.beanpostprocessor.MyBeanFactoryPostProcessorTwo"/>-->
    <!-- =====beanFactoryPostProcessor配置end =====-->
</beans>
